name: CI/CD & Security Scan

on:
  push:
    branches:
      - docker/pipeline
  pull_request:
    branches:
      - docker/pipeline

jobs:
  compile_and_test:
    runs-on: ubuntu-latest
    name: Compile web_app et tests web_app
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8' 
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run tests
        run: pytest
  
  horusec_scan_security_sast:
    needs: compile_and_test
    name: Run Docker horusec-security
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with: # Required when commit authors is enabled
        fetch-depth: 0
    - name: Run Docker Horusec Security
      run: |
        curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest
        horusec start -p="./" -e="false" -o="json" -O="./horusec-output.json"
        
    - name: Save Horusec Report
      if: always()  # This ensures the step runs even if previous steps fail
      run: mv ./horusec-output.json horusec-report.json

    - name: Upload Horusec Report Artifact
      if: always()  # This ensures the step runs even if previous steps fail
      uses: actions/upload-artifact@v2
      with:
        name: horusec-report
        path: horusec-report.json

  zap_scan_security_dast:
    needs: compile_and_test
    runs-on: ubuntu-latest
    name: Run Docker Container
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Docker container and test Dast
        run: |
          docker build -t app_pipeline:latest .
          docker run -d -p 8000:80 --name app_pipeline app_pipeline:latest
          containerip=$(docker inspect -f "{{.NetworkSettings.Networks.bridge.IPAddress }}" app_pipeline)
          docker pull owasp/zap2docker-stable:latest || echo
          docker run --rm -v $(pwd):/zap/wrk -u $(id -u):$(id -g) --user root:root owasp/zap2docker-stable zap-baseline.py -t http://$containerip:80 -r zap_report.html || true
      - name: Upload ZAP report artifact
        uses: actions/upload-artifact@v2
        with:
          name: ZAP Report
          path: zap_report.html

  synk_scan_security_and_sca:
    needs: compile_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.8@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with: 
          args: --json-file-output=snyk-report.json

      - name: Upload Snyk scan report as an artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: security_sca_synk
          path: snyk-report.json

  docker_publish:
    needs: 
      - horusec_scan_security_sast
      - zap_scan_security_dast
      - synk_scan_security_and_sca
    runs-on: ubuntu-latest
    name: Publish Docker Image
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app_pipeline:latest
  deployment_server:
    needs:
      - docker_publish
    runs-on: ubuntu-latest
    name: Deploy on server linode
    steps:
      - name: Install ssh-agent
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy on server
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 'bash -s' << EOF
          docker stop $(docker ps -q)
          docker pull app_pipeline:latest
          docker run -d -p 80:80 julienx2/app_pipeline
          EOF
  

